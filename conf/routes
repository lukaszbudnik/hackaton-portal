# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           controllers.Application.index
GET     /about                      controllers.Application.about
GET     /contact                    controllers.Application.contact
GET     /profile                    controllers.Application.profile
POST	/profile					controllers.Application.updateProfile
GET     /changeLanguage/:lang       controllers.Application.changeLanguage(lang: String)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

GET		/:feed/news					controllers.Feed.news(feed: String)
GET		/:feed/hackathons			controllers.Feed.hackathons(feed: String)
GET     /:feed/hackathons/:hid/news	controllers.Feed.newsH(hid: Long, feed: String)

# Login page
GET     /login                      securesocial.controllers.LoginPage.login
GET     /logout                     securesocial.controllers.LoginPage.logout

# User Registration
GET     /signup                     securesocial.controllers.Registration.signUp
POST    /signup                     securesocial.controllers.Registration.handleSignUp

# Authentication
GET     /authenticate/:provider     securesocial.controllers.LoginPage.authenticate(provider)
POST    /authenticate/:provider     securesocial.controllers.LoginPage.authenticateByPost(provider)

# News routes
# Create
GET     /news/new					controllers.News.create
POST    /news                       controllers.News.save
# Retrieve
GET     /news                       controllers.News.index
GET     /news/:id                   controllers.News.view(id: Long)
GET     /news/search/:label         controllers.News.search(label: String)
# Update
GET     /news/:id/edit              controllers.News.edit(id: Long)
POST    /news/:id                   controllers.News.update(id: Long)
# Delete
POST    /news/:id/delete            controllers.News.delete(id: Long)

# Hackathons routes
# Create
GET     /hackathons/new				controllers.Hackathon.create
POST    /hackathons					controllers.Hackathon.save
# Retrieve
GET     /hackathons					controllers.Hackathon.index
GET     /hackathons/:id				controllers.Hackathon.view(id: Long)
GET     /hackathons/chat/:id		controllers.Hackathon.chat(id: Long)
# Update
GET     /hackathons/:id/edit		controllers.Hackathon.edit(id: Long)
POST    /hackathons/:id				controllers.Hackathon.update(id: Long)
# Delete
POST    /hackathons/:id/delete		controllers.Hackathon.delete(id: Long)

# Delete location
POST   /hackathons/deleteLocation/:id controllers.Hackathon.deleteLocation(id:Int)
# Add location
POST   /hackathons/addLocation 		 controllers.Hackathon.addLocation

# Join
GET    	/hackathons/:id/join			controllers.Hackathon.join(id: Long)
GET    	/hackathons/:id/disconnect		controllers.Hackathon.disconnect(id: Long)
GET    	/hackathons/:id/:uid/disconnect	controllers.Hackathon.disconnectUser(id: Long, uid: Long)

GET     /hackathons.json			controllers.Hackathon.hackathonsJson
GET     /hackathon.json/:id         controllers.Hackathon.hackathonJson(id: Long)

# Hackathons news routes
# Create
GET     /hackathons/:hid/news/new					controllers.News.createH(hid: Long)
POST    /hackathons/:hid/news               		controllers.News.saveH(hid: Long)
# Retrieve
GET     /hackathons/:hid/news   					controllers.News.indexH(hid: Long)
GET     /hackathons/:hid/news/:id           		controllers.News.viewH(hid: Long, id: Long)
# Update
GET     /hackathons/:hid/news/:id/edit      		controllers.News.editH(hid: Long, id: Long)
POST    /hackathons/:hid/news/:id		    		controllers.News.updateH(hid: Long, id: Long)
# Delete
POST    /hackathons/:hid/news/:id/delete    		controllers.News.deleteH(hid: Long, id: Long)

# Problems routes
# Create
GET     /hackathons/:hid/problems/new				controllers.Problem.create(hid: Long)
POST    /hackathons/:hid/problems               	controllers.Problem.save(hid: Long)
# Retrieve
GET     /hackathons/:hid/problems   				controllers.Problem.index(hid: Long)
GET     /hackathons/:hid/problems/:id           	controllers.Problem.view(hid: Long, id: Long)
# Update
GET     /hackathons/:hid/problems/:id/edit      	controllers.Problem.edit(hid: Long, id: Long)
POST    /hackathons/:hid/problems/:id		    	controllers.Problem.update(hid: Long, id: Long)
POST    /hackathons/:hid/problems/:id/verify        controllers.Problem.verify(hid: Long, id: Long)
POST    /hackathons/:hid/problems/:id/approve       controllers.Problem.approve(hid: Long, id: Long)
POST    /hackathons/:hid/problems/:id/suspend       controllers.Problem.suspend(hid: Long, id: Long)
POST    /hackathons/:hid/problems/:id/block        	controllers.Problem.block(hid: Long, id: Long)
# Delete
POST    /hackathons/:hid/problems/:id/delete    	controllers.Problem.delete(hid: Long, id: Long)

# Teams routes
# Create
GET     /hackathons/:hid/teams/new               	controllers.Team.create(hid: Long)
POST    /hackathons/:hid/teams                   	controllers.Team.save(hid: Long)
# Retrieve
GET     /hackathons/:hid/teams						controllers.Team.index(hid: Long)
GET     /hackathons/:hid/teams/:id               	controllers.Team.view(hid: Long, id: Long)
# Update
GET     /hackathons/:hid/teams/:id/edit          	controllers.Team.edit(hid: Long, id: Long)
POST    /hackathons/:hid/teams/:id/update        	controllers.Team.update(hid: Long, id: Long)
POST    /hackathons/:hid/teams/:id/verify        	controllers.Team.verify(hid: Long, id: Long)
POST    /hackathons/:hid/teams/:id/approve        	controllers.Team.approve(hid: Long, id: Long)
POST    /hackathons/:hid/teams/:id/suspend        	controllers.Team.suspend(hid: Long, id: Long)
POST    /hackathons/:hid/teams/:id/block        	controllers.Team.block(hid: Long, id: Long)
# Delete
POST    /hackathons/:hid/teams/:id/delete        	controllers.Team.delete(hid: Long, id: Long)
# Join
GET    	/hackathons/:hid/teams/:id/join				controllers.Team.join(hid: Long, id: Long)
GET    	/hackathons/:hid/teams/:id/disconnect		controllers.Team.disconnect(hid: Long, id: Long)
GET    	/hackathons/:hid/teams/:id/:uid/disconnect	controllers.Team.disconnectUser(hid: Long, id: Long, uid: Long)

# Prizes routes
# Create
GET     /hackathons/:hid/prizes/new					controllers.Prize.create(hid: Long)
POST    /hackathons/:hid/prizes                   	controllers.Prize.save(hid: Long)
# Retrieve
GET     /hackathons/:hid/prizes                   	controllers.Prize.index(hid: Long)
GET     /hackathons/:hid/prizes/:id                 controllers.Prize.view(hid: Long, id: Long)
# Update
GET     /hackathons/:hid/prizes/:id/edit          	controllers.Prize.edit(hid: Long, id: Long)
POST    /hackathons/:hid/prizes/:id		        	controllers.Prize.update(hid: Long, id: Long)
# Delete
POST    /hackathons/:hid/prizes/:id/delete        	controllers.Prize.delete(hid: Long, id: Long)

# Prizes routes
# Create
GET     /hackathons/:hid/sponsors/new				controllers.Sponsor.createH(hid: Long)
POST    /hackathons/:hid/sponsors					controllers.Sponsor.saveH(hid: Long)
# Retrieve
GET     /hackathons/:hid/sponsors					controllers.Sponsor.indexH(hid: Long)
GET     /hackathons/:hid/sponsors/:id				controllers.Sponsor.viewH(hid: Long, id: Long)
# Update
GET     /hackathons/:hid/sponsors/:id/edit			controllers.Sponsor.editH(hid: Long, id: Long)
POST    /hackathons/:hid/sponsors/:id/update		controllers.Sponsor.updateH(hid: Long, id: Long)
# Delete
POST    /hackathons/:hid/sponsors/:id/delete		controllers.Sponsor.deleteH(hid: Long, id: Long)

# Sponsors routes
# Create
GET     /sponsors/new				controllers.Sponsor.create
POST    /sponsors					controllers.Sponsor.save
#Upload
POST    /sponsors/uploadLogo		controllers.Sponsor.uploadLogo
GET		/sponsors/uploadLogo/:id	controllers.Sponsor.getLogoDetails(id:Long)
# Retrieve
GET     /sponsors					controllers.Sponsor.index
GET     /sponsors/:id				controllers.Sponsor.view(id: Long)
# Update
GET     /sponsors/:id/edit			controllers.Sponsor.edit(id: Long)
POST    /sponsors/:id/update		controllers.Sponsor.update(id: Long)
# Delete
GET    	/sponsors/:id/delete		controllers.Sponsor.delete(id: Long)

# Locations routes
# Find
GET		/locations/find/:term				controllers.Location.findByPattern(term : String)
# Create
GET     /locations/new              controllers.Location.create
GET     /locations/newA             controllers.Location.createA
POST    /locations                  controllers.Location.save
POST    /locations/newA             controllers.Location.saveA
# Retrieve
GET     /locations                  controllers.Location.index
GET     /locations/:id              controllers.Location.view(id: Long)
# Update
GET     /locations/:id/edit         controllers.Location.edit(id: Long)
GET     /locations/:id/editA         controllers.Location.editA(id: Long)
POST    /locations/:id/update       controllers.Location.update(id: Long)
POST    /locations/:id/updateA       controllers.Location.updateA(id: Long)
# Delete
POST    /locations/:id/delete       controllers.Location.delete(id: Long)

# Retrieve
GET     /users                          controllers.User.index(page: Int ?= 0, orderBy: Int ?= 1, filter ?= "")
POST    /users/:id/isAdmin/:isAdmin     controllers.User.updateIsAdmin(id: Int, isAdmin: Boolean)
POST    /users/:id/isBlocked/:isBlocked controllers.User.updateIsBlocked(id: Int, isBlocked: Boolean)

# jsmessages subproject
GET     /messages.js                controllers.JsMessagesFeed.jsMessages

# Content manipulation
GET		/contents					controllers.Content.index
GET     /contents/new	 			controllers.Content.create
POST 	/contents					controllers.Content.save
POST	/contents/:key/update		controllers.Content.update(key: String)
GET		/contents/:key/edit			controllers.Content.edit(key: String)
GET		/contents/:key/delete		controllers.Content.delete(key: String)
